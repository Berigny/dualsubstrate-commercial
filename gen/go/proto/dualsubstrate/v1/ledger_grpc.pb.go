// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dualsubstrate/v1/ledger.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DualSubstrate_Rotate_FullMethodName     = "/dualsubstrate.v1.DualSubstrate/Rotate"
	DualSubstrate_Append_FullMethodName     = "/dualsubstrate.v1.DualSubstrate/Append"
	DualSubstrate_ScanPrefix_FullMethodName = "/dualsubstrate.v1.DualSubstrate/ScanPrefix"
)

// DualSubstrateClient is the client API for DualSubstrate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------- Service ---------
type DualSubstrateClient interface {
	Rotate(ctx context.Context, in *QuaternionRequest, opts ...grpc.CallOption) (*QuaternionResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	ScanPrefix(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
}

type dualSubstrateClient struct {
	cc grpc.ClientConnInterface
}

func NewDualSubstrateClient(cc grpc.ClientConnInterface) DualSubstrateClient {
	return &dualSubstrateClient{cc}
}

func (c *dualSubstrateClient) Rotate(ctx context.Context, in *QuaternionRequest, opts ...grpc.CallOption) (*QuaternionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuaternionResponse)
	err := c.cc.Invoke(ctx, DualSubstrate_Rotate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dualSubstrateClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, DualSubstrate_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dualSubstrateClient) ScanPrefix(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, DualSubstrate_ScanPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DualSubstrateServer is the server API for DualSubstrate service.
// All implementations must embed UnimplementedDualSubstrateServer
// for forward compatibility.
//
// --------- Service ---------
type DualSubstrateServer interface {
	Rotate(context.Context, *QuaternionRequest) (*QuaternionResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	ScanPrefix(context.Context, *ScanRequest) (*ScanResponse, error)
	mustEmbedUnimplementedDualSubstrateServer()
}

// UnimplementedDualSubstrateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDualSubstrateServer struct{}

func (UnimplementedDualSubstrateServer) Rotate(context.Context, *QuaternionRequest) (*QuaternionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedDualSubstrateServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedDualSubstrateServer) ScanPrefix(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanPrefix not implemented")
}
func (UnimplementedDualSubstrateServer) mustEmbedUnimplementedDualSubstrateServer() {}
func (UnimplementedDualSubstrateServer) testEmbeddedByValue()                       {}

// UnsafeDualSubstrateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DualSubstrateServer will
// result in compilation errors.
type UnsafeDualSubstrateServer interface {
	mustEmbedUnimplementedDualSubstrateServer()
}

func RegisterDualSubstrateServer(s grpc.ServiceRegistrar, srv DualSubstrateServer) {
	// If the following call pancis, it indicates UnimplementedDualSubstrateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DualSubstrate_ServiceDesc, srv)
}

func _DualSubstrate_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuaternionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DualSubstrateServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DualSubstrate_Rotate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DualSubstrateServer).Rotate(ctx, req.(*QuaternionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DualSubstrate_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DualSubstrateServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DualSubstrate_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DualSubstrateServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DualSubstrate_ScanPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DualSubstrateServer).ScanPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DualSubstrate_ScanPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DualSubstrateServer).ScanPrefix(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DualSubstrate_ServiceDesc is the grpc.ServiceDesc for DualSubstrate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DualSubstrate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dualsubstrate.v1.DualSubstrate",
	HandlerType: (*DualSubstrateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rotate",
			Handler:    _DualSubstrate_Rotate_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _DualSubstrate_Append_Handler,
		},
		{
			MethodName: "ScanPrefix",
			Handler:    _DualSubstrate_ScanPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dualsubstrate/v1/ledger.proto",
}
